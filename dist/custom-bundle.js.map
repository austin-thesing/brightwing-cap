{
  "version": 3,
  "sources": ["../tooltip.js", "../logos/js/logo-hover.js", "../logos/js/logo-scroll.js"],
  "sourcesContent": ["// Tooltip animation with GSAP\nconst initTooltips = () => {\n  // Get all tooltip triggers\n  const tooltipTriggers = document.querySelectorAll(\".custom-tooltip-trigger\");\n\n  // Check screen size categories\n  const isTablet = () => window.innerWidth <= 991 && window.innerWidth >= 768;\n  const isMobile = () => window.innerWidth <= 767;\n  const isDesktop = () => window.innerWidth > 991; // Added for clarity\n\n  tooltipTriggers.forEach((trigger) => {\n    // Find the associated tooltip as a next sibling\n    const tooltip = trigger.nextElementSibling;\n\n    if (!tooltip || !tooltip.classList.contains(\"custom-tooltip\")) {\n      console.warn(\"No tooltip found for trigger:\", trigger);\n      return;\n    }\n\n    // Variable to hold the close timer\n    let closeTimeout;\n\n    const clearCloseTimeout = () => {\n      if (closeTimeout) {\n        clearTimeout(closeTimeout);\n        closeTimeout = null;\n      }\n    };\n\n    const startCloseTimeout = () => {\n      clearCloseTimeout(); // Clear any existing timer first\n      closeTimeout = setTimeout(() => {\n        // Only reverse if the tooltip is actually visible\n        if (tooltip.classList.contains(\"is-visible\")) {\n          tl.reverse();\n        }\n      }, 200); // Delay in milliseconds (adjust as needed)\n    };\n\n    const setInitialState = () => {\n      // Clear any active animations/timeouts before resetting state\n      clearCloseTimeout();\n      if (tl) tl.kill(); // Kill existing timeline if resizing\n\n      if (isTablet()) {\n        // Check specifically for tablet\n        gsap.set(tooltip, {\n          opacity: 0,\n          display: \"none\",\n          scale: 0.95,\n          // NO xPercent needed, using right alignment\n          transformOrigin: \"top right\", // Use top-right origin like desktop\n        });\n      } else if (isMobile()) {\n        // Check specifically for mobile\n        gsap.set(tooltip, {\n          opacity: 0,\n          display: \"none\",\n          scale: 0.95,\n          // NO xPercent on mobile, CSS handles positioning\n          transformOrigin: \"top center\", // Mobile uses top center\n        });\n      } else {\n        // Desktop\n        gsap.set(tooltip, {\n          opacity: 0,\n          display: \"none\",\n          scale: 0.95,\n          // No xPercent needed here either\n          transformOrigin: \"top right\", // Desktop uses top right\n        });\n      }\n    };\n\n    // Create hover animation timeline function (remains the same)\n    const createTimeline = () => {\n      const tl = gsap.timeline({ paused: true });\n\n      tl.to(tooltip, {\n        duration: 0.3,\n        display: \"block\",\n        opacity: 1,\n        scale: 1,\n        ease: \"power2.out\",\n        onStart: () => tooltip.classList.add(\"is-visible\"),\n        onReverseComplete: () => tooltip.classList.remove(\"is-visible\"),\n      });\n\n      return tl;\n    };\n\n    // --- Initial Setup ---\n    let tl; // Declare timeline variable\n    setInitialState(); // Set initial state based on current size\n    tl = createTimeline(); // Create the initial timeline\n\n    // --- Event Listeners ---\n\n    // Handle window resize\n    window.addEventListener(\"resize\", () => {\n      // Debounce resize slightly if needed, but for now direct call\n      setInitialState(); // Reset state according to new size\n      tl = createTimeline(); // Recreate timeline for new state\n      // Re-attach listeners based on new size? No, structure handles it.\n    });\n\n    // Add hover event listeners for desktop\n    if (isDesktop()) {\n      // Use the specific check\n      [trigger, tooltip].forEach((element) => {\n        element.addEventListener(\"mouseenter\", () => {\n          clearCloseTimeout(); // Clear timer if mouse enters trigger or tooltip\n          // Only play if it's not already playing or visible\n          if (!tl.isActive() && !tooltip.classList.contains(\"is-visible\")) {\n            tl.play();\n          }\n        });\n\n        element.addEventListener(\"mouseleave\", () => {\n          startCloseTimeout(); // Start timer when mouse leaves trigger or tooltip\n        });\n      });\n    } else {\n      // Mobile OR Tablet uses click\n      trigger.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        clearCloseTimeout(); // Clear any stray timeouts on click\n\n        const isVisible = tooltip.classList.contains(\"is-visible\");\n        console.log(`Trigger clicked. Tooltip isVisible: ${isVisible}, Timeline active: ${tl.isActive()}, Progress: ${tl.progress()}`); // Debug log\n\n        if (!isVisible) {\n          console.log(\"Attempting to play timeline...\"); // Debug log\n          // Ensure timeline is reset and ready to play forward\n          tl.progress(0).invalidate(); // Reset progress and clear recorded values\n          tl.play();\n        } else {\n          console.log(\"Attempting to reverse timeline...\"); // Debug log\n          // If closing, ensure it reverses smoothly\n          tl.reverse();\n        }\n      });\n    }\n\n    // Close tooltip when clicking outside (applies to all modes)\n    document.addEventListener(\"click\", (e) => {\n      // Check if the click is outside both trigger and tooltip\n      if (!trigger.contains(e.target) && !tooltip.contains(e.target)) {\n        // Only reverse if it's visible\n        if (tooltip.classList.contains(\"is-visible\")) {\n          clearCloseTimeout(); // Clear any pending hover-based close\n          tl.reverse();\n        }\n      }\n    });\n  });\n};\n\n// Initialize tooltips when DOM is loaded\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", initTooltips);\n} else {\n  initTooltips();\n}\n\n// Debug log to confirm script is running\nconsole.log(\"Tooltip script loaded and updated\");\n", "/**\n * Logo hover animation for company items - Greenoaks style\n */\nfunction initLogoHover() {\n  if (typeof gsap === \"undefined\") return;\n\n  // Target all company wrappers\n  const companyWrappers = document.querySelectorAll(\".company-wrapper\");\n\n  companyWrappers.forEach((wrapper) => {\n    const logo = wrapper.querySelector(\".company-logo-asset\");\n    const companyName = wrapper.querySelector(\".company-name\");\n    if (!logo || !companyName) return;\n\n    // Clone the logo and add it as a sibling\n    const hoverLogo = logo.cloneNode(true);\n    hoverLogo.classList.add(\"hover-logo\");\n    logo.parentNode.appendChild(hoverLogo);\n\n    // Set initial states with GSAP\n    gsap.set(logo, {\n      filter: \"brightness(75%) saturate(100%) invert(40%) sepia(60%) saturate(500%) hue-rotate(340deg) brightness(90%) contrast(95%)\",\n      opacity: 1,\n    });\n\n    gsap.set(hoverLogo, {\n      filter: \"none\",\n      opacity: 0,\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n    });\n\n    // Create hover timeline (paused initially)\n    const hoverTl = gsap.timeline({\n      paused: true,\n      defaults: {\n        duration: 0.4,\n        ease: \"power1.inOut\",\n      },\n    });\n\n    // Setup the animation to crossfade between filtered and unfiltered versions\n    hoverTl\n      .to(logo, {\n        opacity: 0,\n      })\n      .to(\n        hoverLogo,\n        {\n          opacity: 1,\n        },\n        \"<\"\n      )\n      .to(\n        companyName,\n        {\n          color: \"#000000\",\n        },\n        \"<\"\n      );\n\n    // Add hover event listeners\n    let isHovering = false;\n\n    wrapper.addEventListener(\"mouseenter\", () => {\n      isHovering = true;\n      requestAnimationFrame(() => {\n        if (isHovering) {\n          hoverTl.play();\n        }\n      });\n    });\n\n    wrapper.addEventListener(\"mouseleave\", () => {\n      isHovering = false;\n      hoverTl.reverse();\n    });\n  });\n}\n\n// Initialize when document is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", initLogoHover);\n} else {\n  initLogoHover();\n}\n", "/**\n * Logo scroll animation for company items\n * Animates logos sliding up when they enter the viewport with staggered timing\n * Responsive layout:\n * - Desktop: 6 items per row\n * - Tablet: Handled by Webflow breakpoints\n * - Mobile: Handled by Webflow breakpoints\n */\nfunction initLogoScroll() {\n  if (typeof gsap === \"undefined\") return;\n\n  // Target all company wrappers\n  const companyWrappers = document.querySelectorAll(\".company-wrapper\");\n\n  // Get items per row based on viewport\n  // Note: Layout is controlled by Webflow's grid system\n  // We just need to match the animation to the visual layout\n  const ITEMS_PER_ROW = 6;\n\n  // Group companies into virtual rows\n  const rows = [];\n  for (let i = 0; i < companyWrappers.length; i += ITEMS_PER_ROW) {\n    rows.push(Array.from(companyWrappers).slice(i, i + ITEMS_PER_ROW));\n  }\n\n  // Set initial state for all companies\n  gsap.set(companyWrappers, {\n    y: 50,\n    opacity: 0,\n  });\n\n  // Create intersection observer\n  const observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          // Find which row this company belongs to\n          const company = entry.target;\n          const rowIndex = Math.floor(Array.from(companyWrappers).indexOf(company) / ITEMS_PER_ROW);\n          const rowCompanies = rows[rowIndex];\n\n          // Animate all companies in this virtual row\n          gsap.to(rowCompanies, {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            ease: \"power2.out\",\n            stagger: {\n              amount: 0.6, // Increased slightly for more visible stagger with 6 items\n              from: \"start\",\n            },\n          });\n\n          // Unobserve all companies in this row\n          rowCompanies.forEach((comp) => observer.unobserve(comp));\n        }\n      });\n    },\n    {\n      threshold: 0.2,\n      rootMargin: \"50px\",\n    }\n  );\n\n  // Observe all company wrappers\n  companyWrappers.forEach((wrapper) => {\n    observer.observe(wrapper);\n  });\n}\n\n// Initialize when document is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", initLogoScroll);\n} else {\n  initLogoScroll();\n}\n"],
  "mappings": "MACA,IAAMA,EAAe,IAAM,CAEzB,IAAMC,EAAkB,SAAS,iBAAiB,yBAAyB,EAGrEC,EAAW,IAAM,OAAO,YAAc,KAAO,OAAO,YAAc,IAClEC,EAAW,IAAM,OAAO,YAAc,IACtCC,EAAY,IAAM,OAAO,WAAa,IAE5CH,EAAgB,QAASI,GAAY,CAEnC,IAAMC,EAAUD,EAAQ,mBAExB,GAAI,CAACC,GAAW,CAACA,EAAQ,UAAU,SAAS,gBAAgB,EAAG,CAC7D,QAAQ,KAAK,gCAAiCD,CAAO,EACrD,MACF,CAGA,IAAIE,EAEEC,EAAoB,IAAM,CAC1BD,IACF,aAAaA,CAAY,EACzBA,EAAe,KAEnB,EAEME,EAAoB,IAAM,CAC9BD,EAAkB,EAClBD,EAAe,WAAW,IAAM,CAE1BD,EAAQ,UAAU,SAAS,YAAY,GACzCI,EAAG,QAAQ,CAEf,EAAG,GAAG,CACR,EAEMC,EAAkB,IAAM,CAE5BH,EAAkB,EACdE,GAAIA,EAAG,KAAK,EAEZR,EAAS,EAEX,KAAK,IAAII,EAAS,CAChB,QAAS,EACT,QAAS,OACT,MAAO,IAEP,gBAAiB,WACnB,CAAC,EACQH,EAAS,EAElB,KAAK,IAAIG,EAAS,CAChB,QAAS,EACT,QAAS,OACT,MAAO,IAEP,gBAAiB,YACnB,CAAC,EAGD,KAAK,IAAIA,EAAS,CAChB,QAAS,EACT,QAAS,OACT,MAAO,IAEP,gBAAiB,WACnB,CAAC,CAEL,EAGMM,EAAiB,IAAM,CAC3B,IAAMF,EAAK,KAAK,SAAS,CAAE,OAAQ,EAAK,CAAC,EAEzC,OAAAA,EAAG,GAAGJ,EAAS,CACb,SAAU,GACV,QAAS,QACT,QAAS,EACT,MAAO,EACP,KAAM,aACN,QAAS,IAAMA,EAAQ,UAAU,IAAI,YAAY,EACjD,kBAAmB,IAAMA,EAAQ,UAAU,OAAO,YAAY,CAChE,CAAC,EAEMI,CACT,EAGIA,EACJC,EAAgB,EAChBD,EAAKE,EAAe,EAKpB,OAAO,iBAAiB,SAAU,IAAM,CAEtCD,EAAgB,EAChBD,EAAKE,EAAe,CAEtB,CAAC,EAGGR,EAAU,EAEZ,CAACC,EAASC,CAAO,EAAE,QAASO,GAAY,CACtCA,EAAQ,iBAAiB,aAAc,IAAM,CAC3CL,EAAkB,EAEd,CAACE,EAAG,SAAS,GAAK,CAACJ,EAAQ,UAAU,SAAS,YAAY,GAC5DI,EAAG,KAAK,CAEZ,CAAC,EAEDG,EAAQ,iBAAiB,aAAc,IAAM,CAC3CJ,EAAkB,CACpB,CAAC,CACH,CAAC,EAGDJ,EAAQ,iBAAiB,QAAUS,GAAM,CACvCA,EAAE,eAAe,EACjBA,EAAE,gBAAgB,EAClBN,EAAkB,EAElB,IAAMO,EAAYT,EAAQ,UAAU,SAAS,YAAY,EACzD,QAAQ,IAAI,uCAAuCS,CAAS,sBAAsBL,EAAG,SAAS,CAAC,eAAeA,EAAG,SAAS,CAAC,EAAE,EAExHK,GAMH,QAAQ,IAAI,mCAAmC,EAE/CL,EAAG,QAAQ,IAPX,QAAQ,IAAI,gCAAgC,EAE5CA,EAAG,SAAS,CAAC,EAAE,WAAW,EAC1BA,EAAG,KAAK,EAMZ,CAAC,EAIH,SAAS,iBAAiB,QAAUI,GAAM,CAEpC,CAACT,EAAQ,SAASS,EAAE,MAAM,GAAK,CAACR,EAAQ,SAASQ,EAAE,MAAM,GAEvDR,EAAQ,UAAU,SAAS,YAAY,IACzCE,EAAkB,EAClBE,EAAG,QAAQ,EAGjB,CAAC,CACH,CAAC,CACH,EAGI,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBV,CAAY,EAE1DA,EAAa,EAIf,QAAQ,IAAI,mCAAmC,ECpK/C,SAASgB,GAAgB,CACvB,GAAI,OAAO,KAAS,IAAa,OAGT,SAAS,iBAAiB,kBAAkB,EAEpD,QAASC,GAAY,CACnC,IAAMC,EAAOD,EAAQ,cAAc,qBAAqB,EAClDE,EAAcF,EAAQ,cAAc,eAAe,EACzD,GAAI,CAACC,GAAQ,CAACC,EAAa,OAG3B,IAAMC,EAAYF,EAAK,UAAU,EAAI,EACrCE,EAAU,UAAU,IAAI,YAAY,EACpCF,EAAK,WAAW,YAAYE,CAAS,EAGrC,KAAK,IAAIF,EAAM,CACb,OAAQ,wHACR,QAAS,CACX,CAAC,EAED,KAAK,IAAIE,EAAW,CAClB,OAAQ,OACR,QAAS,EACT,SAAU,WACV,IAAK,EACL,KAAM,EACN,MAAO,OACP,OAAQ,MACV,CAAC,EAGD,IAAMC,EAAU,KAAK,SAAS,CAC5B,OAAQ,GACR,SAAU,CACR,SAAU,GACV,KAAM,cACR,CACF,CAAC,EAGDA,EACG,GAAGH,EAAM,CACR,QAAS,CACX,CAAC,EACA,GACCE,EACA,CACE,QAAS,CACX,EACA,GACF,EACC,GACCD,EACA,CACE,MAAO,SACT,EACA,GACF,EAGF,IAAIG,EAAa,GAEjBL,EAAQ,iBAAiB,aAAc,IAAM,CAC3CK,EAAa,GACb,sBAAsB,IAAM,CACtBA,GACFD,EAAQ,KAAK,CAEjB,CAAC,CACH,CAAC,EAEDJ,EAAQ,iBAAiB,aAAc,IAAM,CAC3CK,EAAa,GACbD,EAAQ,QAAQ,CAClB,CAAC,CACH,CAAC,CACH,CAGI,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBL,CAAa,EAE3DA,EAAc,EC/EhB,SAASO,GAAiB,CACxB,GAAI,OAAO,KAAS,IAAa,OAGjC,IAAMC,EAAkB,SAAS,iBAAiB,kBAAkB,EAK9DC,EAAgB,EAGhBC,EAAO,CAAC,EACd,QAASC,EAAI,EAAGA,EAAIH,EAAgB,OAAQG,GAAKF,EAC/CC,EAAK,KAAK,MAAM,KAAKF,CAAe,EAAE,MAAMG,EAAGA,EAAIF,CAAa,CAAC,EAInE,KAAK,IAAID,EAAiB,CACxB,EAAG,GACH,QAAS,CACX,CAAC,EAGD,IAAMI,EAAW,IAAI,qBAClBC,GAAY,CACXA,EAAQ,QAASC,GAAU,CACzB,GAAIA,EAAM,eAAgB,CAExB,IAAMC,EAAUD,EAAM,OAChBE,EAAW,KAAK,MAAM,MAAM,KAAKR,CAAe,EAAE,QAAQO,CAAO,EAAIN,CAAa,EAClFQ,EAAeP,EAAKM,CAAQ,EAGlC,KAAK,GAAGC,EAAc,CACpB,EAAG,EACH,QAAS,EACT,SAAU,GACV,KAAM,aACN,QAAS,CACP,OAAQ,GACR,KAAM,OACR,CACF,CAAC,EAGDA,EAAa,QAASC,GAASN,EAAS,UAAUM,CAAI,CAAC,CACzD,CACF,CAAC,CACH,EACA,CACE,UAAW,GACX,WAAY,MACd,CACF,EAGAV,EAAgB,QAASW,GAAY,CACnCP,EAAS,QAAQO,CAAO,CAC1B,CAAC,CACH,CAGI,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBZ,CAAc,EAE5DA,EAAe",
  "names": ["initTooltips", "tooltipTriggers", "isTablet", "isMobile", "isDesktop", "trigger", "tooltip", "closeTimeout", "clearCloseTimeout", "startCloseTimeout", "tl", "setInitialState", "createTimeline", "element", "e", "isVisible", "initLogoHover", "wrapper", "logo", "companyName", "hoverLogo", "hoverTl", "isHovering", "initLogoScroll", "companyWrappers", "ITEMS_PER_ROW", "rows", "i", "observer", "entries", "entry", "company", "rowIndex", "rowCompanies", "comp", "wrapper"]
}
